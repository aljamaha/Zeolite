import os, json
from ase import io
import matplotlib.pyplot as plt

with open('/home/aljama/BEA/Pd1/data/data.json','r') as read:
	data = json.load(read)

ref = ['67.traj', '132.traj', '3.traj', '41.traj', '18.traj', '216.traj', '98.traj', '206.traj', '185.traj', '131.traj', '155.traj', '65.traj', '78.traj', '195.traj', '9.traj', '31.traj', '84.traj', '99.traj', '61.traj', '186.traj', '25.traj', '44.traj', '28.traj', '64.traj', '248.traj', '162.traj', '130.traj', '100.traj', '7.traj', '20.traj', '71.traj', '21.traj', '1.traj', '10.traj', '22.traj', '2.traj', '63.traj', '11.traj', '8.traj', '125.traj', '163.traj', '5.traj', '93.traj', '101.traj', '4.traj', '212.traj', '6.traj', '127.traj', '12.traj', '165.traj', '134.traj', '54.traj']
E = [-2.9586186599979665, -2.9521431630920003, -2.9219352437296107, -2.8978741075231618, -2.8928481619345057, -2.880656094184924, -2.8709650261917985, -2.8629659630255504, -2.860703335136576, -2.853653949859794, -2.8487305912779273, -2.8452597771862185, -2.8445245251627354, -2.8417282816955245, -2.8322154483683915, -2.8282262571440313, -2.8195207860302456, -2.814312796195136, -2.811312467233081, -2.809418281664467, -2.80890752364324, -2.801371054309853, -2.7963959940702825, -2.796078709185382, -2.792211697117108, -2.786677714692693, -2.783214791947274, -2.7761893526967394, -2.7723144493069247, -2.76838321832083, -2.764988324073692, -2.7596050927949354, -2.7585267050576996, -2.7525785650999115, -2.7386950366962, -2.737631070996937, -2.7226057522715363, -2.703708523403414, -2.6882929932203843, -2.686672282200507, -2.6499543074978886, -2.64866285447503, -2.6373551572031073, -2.6357934949402306, -2.6159550237759253, -2.6137340292846383, -2.6119715469346305, -2.5955448411050335, -2.587703876158991, -2.478151596127654, -2.45966008924912, -2.3844717256796453]

#ref = ['67.traj', '132.traj', '3.traj', '41.traj', '18.traj', '216.traj', '98.traj', '206.traj', '185.traj', '131.traj', '155.traj', '65.traj', '78.traj', '195.traj', '9.traj', '31.traj', '84.traj', '99.traj', '61.traj', '186.traj', '25.traj', '44.traj', '28.traj', '64.traj', '248.traj', '162.traj', '130.traj', '100.traj', '7.traj', '20.traj', '71.traj', '21.traj', '1.traj', '10.traj', '22.traj', '2.traj', '63.traj', '11.traj', '8.traj', '125.traj', '163.traj', '5.traj', '93.traj', '101.traj', '4.traj', '212.traj', '6.traj', '127.traj', '12.traj', '165.traj', '134.traj']
#E = [-2.9586186599979665, -2.9521431630920003, -2.9219352437296107, -2.8978741075231618, -2.8928481619345057, -2.880656094184924, -2.8709650261917985, -2.8629659630255504, -2.860703335136576, -2.853653949859794, -2.8487305912779273, -2.8452597771862185, -2.8445245251627354, -2.8417282816955245, -2.8322154483683915, -2.8282262571440313, -2.8195207860302456, -2.814312796195136, -2.811312467233081, -2.809418281664467, -2.80890752364324, -2.801371054309853, -2.7963959940702825, -2.796078709185382, -2.792211697117108, -2.786677714692693, -2.783214791947274, -2.7761893526967394, -2.7723144493069247, -2.76838321832083, -2.764988324073692, -2.7596050927949354, -2.7585267050576996, -2.7525785650999115, -2.7386950366962, -2.737631070996937, -2.7226057522715363, -2.703708523403414, -2.6882929932203843, -2.686672282200507, -2.6499543074978886, -2.64866285447503, -2.6373551572031073, -2.6357934949402306, -2.6159550237759253, -2.6137340292846383, -2.6119715469346305, -2.5955448411050335, -2.587703876158991, -2.478151596127654, -2.45966008924912]
E_dict = {1149: -2.86, 1747: -2.86, 1028: -2.86, 1867: -2.86, 1029: -2.86, 1154: -2.86, 447: -2.86, 1872: -2.86, 907: -2.86, 1398: -2.86, 1150: -2.86, 111: -2.86, 1018: -2.68, 1017: -2.68, 1139: -2.68, 1858: -2.68, 1143: -2.68, 1140: -2.68, 1384: -2.68, 438: -2.68, 1861: -2.68, 1857: -2.68, 1731: -2.63, 1138: -2.63, 1856: -2.63, 1135: -2.63, 1382: -2.63, 1012: -2.63, 1013: -2.63, 1134: -2.63, 96: -2.63, 1241: -2.75, 1119: -2.75, 1838: -2.75, 1716: -2.75, 1841: -2.75, 1367: -2.75, 81: -2.75, 998: -2.75, 1120: -2.75, 1123: -2.75, 2085: -2.75, 1023: -2.85, 1862: -2.85, 1866: -2.85, 1148: -2.85, 1144: -2.85, 1022: -2.85, 1145: -2.85, 1389: -2.85, 1155: -2.88, 1034: -2.88, 1873: -2.88, 1752: -2.88, 1399: -2.88, 1851: -2.81, 2095: -2.81, 1848: -2.81, 1726: -2.81, 1129: -2.81, 1007: -2.81, 1008: -2.81, 1133: -2.81, 1377: -2.81, 1130: -2.81, 91: -2.81, 2090: -2.82, 1372: -2.82, 1124: -2.82, 1125: -2.82, 1721: -2.82, 1246: -2.82, 1128: -2.82, 86: -2.82, 1003: -2.82, 884: -2.82, 1876: -2.8, 1037: -2.8, 1158: -2.8, 455: -2.8, 1403: -2.8}

for index, reference in enumerate(ref):
	atoms = io.read('../structures_saved/'+reference)
	tmp = []
	for atom in atoms:
		if atom.symbol == 'Al':
			try:
				tmp.append(E_dict[atom.index])
			except:
				print('Failed', atom.index, reference)
	if tmp != []:
		tmp_E = min(tmp)

	if data[reference]['Al-Al MR'] == [5,5]:
		#plt.plot(E[index], tmp_E,'ro',markersize=8)
		a=0
	elif data[reference]['Al-Al MR'] == [6,6]:
		#plt.plot(E[index], tmp_E,'bo', markersize=8)	
		a=0
	elif data[reference]['Al-Al MR'] == [4,4]:
		#plt.plot(E[index], tmp_E,'go', markersize=8)
		a=0
	elif data[reference]['Al'] == 2:
		if data[reference]['N'] == 'NN':
			plt.plot(E[index], tmp_E, 'yo', markersize=8)
			plt.text(E[index], tmp_E, reference)
		else:
			plt.plot(E[index], tmp_E,'co', markersize=8)
			plt.text(E[index], tmp_E, reference)

plt.xlabel('DFT Results (eV)', fontsize=16)
plt.ylabel('Prediction  (eV)', fontsize=16)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.plot([-3,-2.5],[-3,-2.5],'k')
plt.show()
		
